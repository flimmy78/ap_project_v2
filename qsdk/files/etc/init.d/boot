#!/bin/sh /etc/rc.common
# Copyright (c) 2013 The Linux Foundation. All rights reserved.
# Copyright (C) 2006-2011 OpenWrt.org

START=10
STOP=98

system_config() {
	local cfg="$1"

	local hostname conloglevel timezone

	config_get hostname "$cfg" hostname 'OpenWrt'
	echo "$hostname" > /proc/sys/kernel/hostname

	config_get conloglevel "$cfg" conloglevel
	config_get buffersize "$cfg" buffersize
	[ -z "$conloglevel" -a -z "$buffersize" ] || dmesg ${conloglevel:+-n $conloglevel} ${buffersize:+-s $buffersize}

	config_get timezone "$cfg" timezone 'UTC'
	echo "$timezone" > /tmp/TZ

	config_get zonename "$cfg" zonename
	[ -n "$zonename" ] && [ -f "/usr/share/zoneinfo/$zonename" ] && ln -s "/usr/share/zoneinfo/$zonename" /tmp/localtime

	# apply timezone to kernel
	date -k

	if [ -x /sbin/syslogd ]; then
		local args log_ip log_size log_port log_type log_file
		config_get log_ip "$cfg" log_ip 
		config_get log_size "$cfg" log_size 16
		config_get log_port "$cfg" log_port 514
		config_get log_type "$cfg" log_type circular
		config_get log_file "$cfg" log_file "/var/log/messages"
		args="${log_ip:+-L -R ${log_ip}:${log_port}} ${conloglevel:+-l $conloglevel}"
		if [ "$log_type" = "file" ]; then
			args="$args -s $log_size -O $log_file -S"
		else
			args="$args -C${log_size}"
		fi
		service_start /sbin/syslogd $args
	fi
	if [ -x /sbin/klogd ]; then
		config_get klogconloglevel "$cfg" klogconloglevel
		args="${klogconloglevel:+-c $klogconloglevel}"
		service_start /sbin/klogd $args
	fi
}

apply_uci_config() {
	sh -c '. /lib/functions.sh; include /lib/config; uci_apply_defaults'
}

autelan_func() {
	PRODUCT_INFO=/tmp/.productinfo		
	
	if [ -f "$PRODUCT_INFO" ]; then        	
		cat "$PRODUCT_INFO"	
	else		
		local mac=$(/usr/bin/partool -part mtd7 -show product.mac | sed 's/://g')		
#		ifconfig eth0 hw ether "$mac"                
		local mac_1=` echo $mac | awk -F '' '{print $1$2$3$4$5$6}' `                
		local mac_2=` echo $mac | awk -F '' '{print $7$8$9$10$11$12}' `		
		local mac1="$mac_1""$(awk 'BEGIN{printf("%06x",'0x$mac_2'+'0x000002')}')"
		local mac2="$mac_1""$(awk 'BEGIN{printf("%06x",'0x$mac_2'+'0x000003')}')"
		ifconfig eth0 hw ether "$mac1"
		ifconfig eth1 hw ether "$mac2"				
		local model sn vendor		
		vendor=$(/usr/bin/partool -part mtd7 -show product.vendor)		
		model=$(/usr/bin/partool -part mtd7 -show product.model)		
		sn=$(/usr/bin/partool -part mtd7 -show product.sn)				
		[ -n "$mac" ] && echo "MAC:$mac"   	>>  "$PRODUCT_INFO"		
		[ -n "$sn" ] && echo "SN:$sn"		>> "$PRODUCT_INFO"		
		[ -n "$vendor" ] && echo "Vendor:$vendor"	>>  "$PRODUCT_INFO"		
		[ -n "$model" ] && echo "Model:$model"		>> "$PRODUCT_INFO"	
	fi
}


start() {
	[ -f /proc/mounts ] || /sbin/mount_root
	[ -f /proc/jffs2_bbc ] && echo "S" > /proc/jffs2_bbc
	[ -f /proc/net/vlan/config ] && vconfig set_name_type DEV_PLUS_VID_NO_PAD

	mkdir -p /var/run
	mkdir -p /var/log
	mkdir -p /var/lock
	mkdir -p /var/state
	mkdir -p /tmp/tftp
	mkdir -p /tmp/.uci
	chmod 0700 /tmp/.uci
	touch /var/log/wtmp
	touch /var/log/lastlog
	touch /tmp/resolv.conf.auto
	ln -sf /tmp/resolv.conf.auto /tmp/resolv.conf
	grep -q debugfs /proc/filesystems && mount -t debugfs debugfs /sys/kernel/debug
	[ "$FAILSAFE" = "true" ] && touch /tmp/.failsafe

	load_modules /etc/modules.d/*

	# allow wifi modules time to settle
	sleep 1

	/sbin/wifi detect > /tmp/wireless.tmp
	[ -s /tmp/wireless.tmp ] && {
		cat /tmp/wireless.tmp >> /etc/config/wireless
	}
	rm -f /tmp/wireless.tmp

	/sbin/sound detect > /tmp/sound.tmp
	[ -s /tmp/sound.tmp ] && {
		cat /tmp/sound.tmp >> /etc/config/sound
	}
	rm -f /tmp/sound.tmp

	apply_uci_config
	config_load system
	config_foreach system_config system

	autelan_func

	killall -q hotplug2
	[ -x /sbin/hotplug2 ] && /sbin/hotplug2 --override --persistent \
			--set-rules-file /etc/hotplug2.rules \
			--set-coldplug-cmd /sbin/udevtrigger \
			--max-children 1 >/dev/null 2>&1 &

	# create /dev/root if it doesn't exist
	[ -e /dev/root -o -h /dev/root ] || {
		rootdev=$(awk 'BEGIN { RS=" "; FS="="; } $1 == "root" { print $2 }' < /proc/cmdline)
		[ -n "$rootdev" ] && ln -s "$rootdev" /dev/root
	}
}

stop() {
	service_stop /sbin/klogd
	service_stop /sbin/syslogd
}
